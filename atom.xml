<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CODER</title>
  
  <subtitle>ronzzj</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ronzzj.github.io/"/>
  <updated>2020-08-23T15:22:02.062Z</updated>
  <id>https://ronzzj.github.io/</id>
  
  <author>
    <name>ron</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络基础知识</title>
    <link href="https://ronzzj.github.io/2020/08/23/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://ronzzj.github.io/2020/08/23/网络基础知识/</id>
    <published>2020-08-23T15:19:28.000Z</published>
    <updated>2020-08-23T15:22:02.062Z</updated>
    
    <content type="html"><![CDATA[<h5 id="计算机网络基础学习"><a href="#计算机网络基础学习" class="headerlink" title="计算机网络基础学习"></a><strong>计算机网络基础学习</strong></h5><p>url: <a href="https://www.runoob.com/w3cnote/summary-of-network.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/summary-of-network.html</a></p><h5 id="计算机网络概述"><a href="#计算机网络概述" class="headerlink" title="计算机网络概述"></a>计算机网络概述</h5><p>计算机网络的核心内容的就是计算机网络协议。网络协议是为计算机设备之间的数据交换和通信，而建立的一套规则和约定的某种标准。TCP/IP是目前目前通用的网络协议。</p><h5 id="网络层次划分"><a href="#网络层次划分" class="headerlink" title="网络层次划分"></a>网络层次划分</h5><h6 id="OSI-RM模型（Open-System-Interconnection-Reference-Model）"><a href="#OSI-RM模型（Open-System-Interconnection-Reference-Model）" class="headerlink" title="OSI/RM模型（Open System Interconnection/Reference Model）"></a>OSI/RM模型（Open System Interconnection/Reference Model）</h6><p>特点： 自下而上</p><p>物理层（Physics Layer）、数据链路层（Data Link Layer）、网络层（Network Layer）、传输层（Transport Layer）、会话层（Session Layer）、表示层（Presentation Layer）、应用层（Application Layer）</p><h6 id="TCP-IP四层模型"><a href="#TCP-IP四层模型" class="headerlink" title="TCP/IP四层模型"></a>TCP/IP四层模型</h6><p>应用层、传输层、网络层、网络接口层</p><h6 id="TCP-IP五层模型"><a href="#TCP-IP五层模型" class="headerlink" title="TCP/IP五层模型"></a>TCP/IP五层模型</h6><p>应用层、传输层、网络层、数据链路层、物理层</p><h6 id="OSI-RM模型解析"><a href="#OSI-RM模型解析" class="headerlink" title="OSI/RM模型解析"></a>OSI/RM模型解析</h6><ul><li><p>物理层</p><p>激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性。<strong>该层为上层协议提供了一个传输数据的可靠的物理媒体。简单的说，物理层确保原始的数据可在各种物理媒体上传输。</strong>物理层记住两个重要的设备名称，中继器（Repeater，也叫放大器）和集线器。</p></li><li><p>数据链路层</p><p>数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。为达到这一目的，数据链路必须具备一系列相应的功能，主要有：如何将数据组合成数据块，在数据链路层中称这种数据块为帧（frame），帧是数据链路层的传送单位；如何控制帧在物理信道上的传输，包括如何处理传输差错，如何调节发送速率以使与接收方相匹配；以及在两个网络实体之间提供数据链路通路的建立、维持和释放的管理。数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</p><p>有关数据链路层的重要知识点：</p><ul><li><strong>1&gt; 数据链路层为网络层提供可靠的数据传输；</strong></li><li><strong>2&gt; 基本数据单位为帧；</strong></li><li><strong>3&gt; 主要的协议：以太网协议；</strong></li><li><strong>4&gt; 两个重要设备名称：网桥和交换机。</strong></li><li><strong>3）网络层（Network Layer）</strong></li></ul><p>网络层的目的是实现两个端系统之间的数据透明传送，具体功能包括寻址和路由选择、连接的建立、保持和终止等。它提供的服务使传输层不需要了解网络中的数据传输和交换技术。如果您想用尽量少的词来记住网络层，那就是”路径选择、路由及逻辑寻址”。</p><p>网络层中涉及众多的协议，其中包括最重要的协议，也是TCP/IP的核心协议——IP协议。IP协议非常简单，仅仅提供不可靠、无连接的传送服务。IP协议的主要功能有：无连接数据报传输、数据报路由选择和差错控制。与IP协议配套使用实现其功能的还有地址解析协议ARP、逆地址解析协议RARP、因特网报文协议ICMP、因特网组管理协议IGMP。具体的协议我们会在接下来的部分进行总结，有关网络层的重点为：</p><ul><li>　　<strong>1&gt; 网络层负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能；</strong></li><li>　　<strong>2&gt; 基本数据单位为IP数据报；</strong></li><li>　　<strong>3&gt; 包含的主要协议：</strong></li><li>　　<strong>IP协议（Internet Protocol，因特网互联协议）;</strong></li><li>　　<strong>ICMP协议（Internet Control Message Protocol，因特网控制报文协议）;</strong></li><li>　　<strong>ARP协议（Address Resolution Protocol，地址解析协议）;</strong></li><li>　　<strong>RARP协议（Reverse Address Resolution Protocol，逆地址解析协议）。</strong></li><li>　　<strong>4&gt; 重要的设备：路由器</strong></li></ul></li><li><p>网络层</p></li><li><p>传输层</p></li><li><p>会话层</p></li><li><p>表示层</p></li><li><p>应用层</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;计算机网络基础学习&quot;&gt;&lt;a href=&quot;#计算机网络基础学习&quot; class=&quot;headerlink&quot; title=&quot;计算机网络基础学习&quot;&gt;&lt;/a&gt;&lt;strong&gt;计算机网络基础学习&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;url: &lt;a href=&quot;https://www
      
    
    </summary>
    
    
    
      <category term="网络" scheme="https://ronzzj.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>hexo指令</title>
    <link href="https://ronzzj.github.io/2020/08/09/hexo%E6%8C%87%E4%BB%A4/"/>
    <id>https://ronzzj.github.io/2020/08/09/hexo指令/</id>
    <published>2020-08-09T06:14:32.000Z</published>
    <updated>2020-08-09T06:15:47.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-博客"><a href="#Hexo-博客" class="headerlink" title="Hexo 博客"></a><strong>Hexo 博客</strong></h1><h5 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a><strong>Hexo 简介</strong></h5><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h5 id="Hexo-环境配置"><a href="#Hexo-环境配置" class="headerlink" title="Hexo 环境配置"></a><strong>Hexo 环境配置</strong></h5><ul><li><p>Node.js（8.10以上）</p></li><li><p>git</p></li></ul><h5 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a><strong>Hexo安装</strong></h5><ul><li><p>全局安装 <code>npm install -g hexo-cli</code></p></li><li><p>局部安装 <code>npm install hexo</code></p></li></ul><h5 id="Hexo建站"><a href="#Hexo建站" class="headerlink" title="Hexo建站"></a><strong>Hexo建站</strong></h5><ul><li>新建文件夹</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo init &lt;folder&gt;</span><br><span class="line"><span class="meta">$</span> cd &lt;folder&gt;</span><br><span class="line"><span class="meta">$</span> npm install</span><br></pre></td></tr></table></figure><ul><li>目录结构</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml 网站的配置信息，您可以在此配置大部分的参数。</span><br><span class="line">├── package.json 应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</span><br><span class="line">├── scaffolds 模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span><br><span class="line">├── source 资源文件夹是存放用户资源的地方。</span><br><span class="line">|   ├── _drafts </span><br><span class="line">|   └── _posts 除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。</span><br><span class="line">└── themes 主题文件夹。Hexo 会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure><h5 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a><strong>Hexo配置</strong></h5><p><code>https://hexo.io/zh-cn/docs/configuration</code></p><h5 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a><strong>Hexo命令</strong></h5><p><code>hexo init [folder]</code>  新建项目文件夹，并初始化</p><p><code>hexo new [layout] &lt;title&gt;</code> 新建文章</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-p, --path自定义新文章的路径</span><br><span class="line">-r, --replace如果存在同名文章，将其替换</span><br><span class="line">-s, --slug文章的 Slug，作为新文章的文件名和发布后的 URL</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo-博客&quot;&gt;&lt;a href=&quot;#Hexo-博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo 博客&quot;&gt;&lt;/a&gt;&lt;strong&gt;Hexo 博客&lt;/strong&gt;&lt;/h1&gt;&lt;h5 id=&quot;Hexo-简介&quot;&gt;&lt;a href=&quot;#Hexo-简介&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>git速学</title>
    <link href="https://ronzzj.github.io/2019/07/07/git%E9%80%9F%E5%AD%A6/"/>
    <id>https://ronzzj.github.io/2019/07/07/git速学/</id>
    <published>2019-07-07T14:18:51.000Z</published>
    <updated>2020-08-09T06:12:33.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h2><ul><li><p>初始化仓库  </p><ol><li><p>初始当前文件夹  </p><p><code>git init</code>   </p></li><li><p>指定文件夹初始化 </p><p><code>git  init FolderName</code></p></li></ol></li><li><p>添加新文件  </p><ol><li><p>添加全部文件</p><p><code>git add .</code></p></li><li><p>添加指定文件</p><p><code>git add FileName</code></p></li></ol></li><li><p>提交版本</p><ol><li><p>提交到仓库</p><p><code>git commit -m &quot;注释信息&quot;</code> </p></li><li><p>同时添加和add</p><p><code>git commit -a -m &quot;注释信息&quot;</code></p></li></ol></li><li><p>发布版本</p><ol><li><p>克隆并发布</p><p><code>git clone ssh: example.url.git</code></p></li><li><p>发布版本</p><p><code>git push ssh: example.url.git</code></p></li></ol></li><li><p>删除文件</p><p><code>git rm file</code></p></li><li><p>创建分支</p><p><code>git branch test</code></p></li><li><p>切换分支</p><p><code>git checkout test</code></p></li><li><p>删除分支</p><p><code>git branch -d test</code></p></li><li><p>合并分支</p><p><code>git merge test</code></p></li></ul><ul><li>git init</li><li>git add .</li><li>git commit -m “项目描述”</li><li>git remote add origin <a href="https://github.com/ronzzj/-BirckBracker.git" target="_blank" rel="noopener">https://github.com/ronzzj/-BirckBracker.git</a></li><li>git push origin master</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git基本命令&quot;&gt;&lt;a href=&quot;#git基本命令&quot; class=&quot;headerlink&quot; title=&quot;git基本命令&quot;&gt;&lt;/a&gt;git基本命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初始化仓库  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;初始当前文件夹  &lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="git" scheme="https://ronzzj.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://ronzzj.github.io/tags/git/"/>
    
  </entry>
  
</feed>
